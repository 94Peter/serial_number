// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: grpc/proto/gcp.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GcpServiceClient is the client API for GcpService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GcpServiceClient interface {
	// 建立前綴
	CreatePrefix(ctx context.Context, in *CreatePrefixRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 更新序號
	UpdateStartNumber(ctx context.Context, in *CreatePrefixRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 取得序號
	GetSerialNumber(ctx context.Context, in *GetSerialNumberRequest, opts ...grpc.CallOption) (*SerialNumberRespose, error)
	// 清除前綴
	ClearPrefix(ctx context.Context, in *GetSerialNumberRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type gcpServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGcpServiceClient(cc grpc.ClientConnInterface) GcpServiceClient {
	return &gcpServiceClient{cc}
}

func (c *gcpServiceClient) CreatePrefix(ctx context.Context, in *CreatePrefixRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/serial_number.GcpService/CreatePrefix", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gcpServiceClient) UpdateStartNumber(ctx context.Context, in *CreatePrefixRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/serial_number.GcpService/UpdateStartNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gcpServiceClient) GetSerialNumber(ctx context.Context, in *GetSerialNumberRequest, opts ...grpc.CallOption) (*SerialNumberRespose, error) {
	out := new(SerialNumberRespose)
	err := c.cc.Invoke(ctx, "/serial_number.GcpService/GetSerialNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gcpServiceClient) ClearPrefix(ctx context.Context, in *GetSerialNumberRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/serial_number.GcpService/ClearPrefix", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GcpServiceServer is the server API for GcpService service.
// All implementations must embed UnimplementedGcpServiceServer
// for forward compatibility
type GcpServiceServer interface {
	// 建立前綴
	CreatePrefix(context.Context, *CreatePrefixRequest) (*emptypb.Empty, error)
	// 更新序號
	UpdateStartNumber(context.Context, *CreatePrefixRequest) (*emptypb.Empty, error)
	// 取得序號
	GetSerialNumber(context.Context, *GetSerialNumberRequest) (*SerialNumberRespose, error)
	// 清除前綴
	ClearPrefix(context.Context, *GetSerialNumberRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedGcpServiceServer()
}

// UnimplementedGcpServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGcpServiceServer struct {
}

func (UnimplementedGcpServiceServer) CreatePrefix(context.Context, *CreatePrefixRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePrefix not implemented")
}
func (UnimplementedGcpServiceServer) UpdateStartNumber(context.Context, *CreatePrefixRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStartNumber not implemented")
}
func (UnimplementedGcpServiceServer) GetSerialNumber(context.Context, *GetSerialNumberRequest) (*SerialNumberRespose, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSerialNumber not implemented")
}
func (UnimplementedGcpServiceServer) ClearPrefix(context.Context, *GetSerialNumberRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearPrefix not implemented")
}
func (UnimplementedGcpServiceServer) mustEmbedUnimplementedGcpServiceServer() {}

// UnsafeGcpServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GcpServiceServer will
// result in compilation errors.
type UnsafeGcpServiceServer interface {
	mustEmbedUnimplementedGcpServiceServer()
}

func RegisterGcpServiceServer(s grpc.ServiceRegistrar, srv GcpServiceServer) {
	s.RegisterService(&GcpService_ServiceDesc, srv)
}

func _GcpService_CreatePrefix_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePrefixRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GcpServiceServer).CreatePrefix(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serial_number.GcpService/CreatePrefix",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GcpServiceServer).CreatePrefix(ctx, req.(*CreatePrefixRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GcpService_UpdateStartNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePrefixRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GcpServiceServer).UpdateStartNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serial_number.GcpService/UpdateStartNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GcpServiceServer).UpdateStartNumber(ctx, req.(*CreatePrefixRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GcpService_GetSerialNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSerialNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GcpServiceServer).GetSerialNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serial_number.GcpService/GetSerialNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GcpServiceServer).GetSerialNumber(ctx, req.(*GetSerialNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GcpService_ClearPrefix_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSerialNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GcpServiceServer).ClearPrefix(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serial_number.GcpService/ClearPrefix",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GcpServiceServer).ClearPrefix(ctx, req.(*GetSerialNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GcpService_ServiceDesc is the grpc.ServiceDesc for GcpService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GcpService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "serial_number.GcpService",
	HandlerType: (*GcpServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePrefix",
			Handler:    _GcpService_CreatePrefix_Handler,
		},
		{
			MethodName: "UpdateStartNumber",
			Handler:    _GcpService_UpdateStartNumber_Handler,
		},
		{
			MethodName: "GetSerialNumber",
			Handler:    _GcpService_GetSerialNumber_Handler,
		},
		{
			MethodName: "ClearPrefix",
			Handler:    _GcpService_ClearPrefix_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/proto/gcp.proto",
}
